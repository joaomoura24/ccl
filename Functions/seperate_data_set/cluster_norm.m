%% User Input
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
DH = [0.0, 0.31, 0.0, pi/2; % Robot Kinematic model specified by the Denavit-Hartnbergh
      0.0, 0.0, 0.0, -pi/2;
      0.0, 0.4, 0.0, -pi/2;
      0.0, 0.0, 0.0, pi/2;
      0.0, 0.39, 0.0, pi/2;
      0.0, 0.0, 0.0, -pi/2;
      0.0, 0.21-0.132, 0.0, 0.0];
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------

%% Add path
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
addpath(genpath('../')); % add the library and it's subfolders to the path
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------

%% Initialize roobot model and the Regressors for the constraint and main task
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
fprintf(1,'Defining robot model ...\n');
robot = SerialLink(DH); % Peters Cork robotics library has to be installed
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------

%% Get data
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
fprintf(1,'Getting data ...\n');
load('data_smooth.mat');
NDem = length(x); % number of demonstrations
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------

%% Computing norm, centre, and radious
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
fprintf(1,'Computing norm, centre, and radious ...\n');
c = cell(1, NDem); % wiping circle centre
r = cell(1, NDem); % wiping circle radious
n = cell(1, NDem); % planar surface normal
getPos = @(q) transl(robot.fkine(q)); % compute end-effector postion
parfor idx=1:NDem
    %p{idx} = transl(robot.fkine(cell2mat(q{idx}).')); % compute end-effector postion
    p{idx} = getPos(cell2mat(x{idx}).'); % compute end-effector postion
    [c{idx}, r{idx}, n{idx}] = fit_3d_circle(p{idx}(:,1),p{idx}(:,2),p{idx}(:,3));
end
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------

%% Auxiliar functions:
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
getWFileName = @(w,i) strcat('W_A/w',num2str(w),'i',num2str(i),'.mat');
dot_prod = @(a,b) sum(bsxfun(@times,bsxfun(@minus,a,b),bsxfun(@minus,a,b)),1);
%dot_prod = @(a,b) sum(bsxfun(@times,a,b),1);
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------

%% Compute Correlation Matrix between W of different windows
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
n_corr = ones(NDem);
c_corr = ones(NDem);
tic;
nn = cell2mat(n);
cc = cell2mat(c);
for idx=1:NDem
    n_corr(idx,idx:end) = dot_prod(nn(:,idx),nn(:,idx:end));
    c_corr(idx,idx:end) = dot_prod(cc(:,idx),cc(:,idx:end));
end
n_corr = sqrt(abs(n_corr.*n_corr.'));
c_corr = sqrt(abs(c_corr.*c_corr.'));
toc
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------

%% Display correlation Matrix
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
% figure();
% imagesc(n_corr); colorbar; colormap jet;
cenas = n_corr./max(max(n_corr));
figure();
imagesc(cenas); colorbar; colormap jet;
%caxis([0 0.01]);
cenas = c_corr./max(max(c_corr));
figure();
imagesc(cenas); colorbar; colormap jet;
%caxis([0 0.01]);

%--------------------------------------------------------------------------
%--------------------------------------------------------------------------