%% Add path
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
addpath(genpath('../'));
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------

%% Get data
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
fprintf(1,'Getting data ...\n');
load('data_smooth.mat');
NDem = length(x); % number of demonstrations
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------

%% Initialize roobot model and the Regressors for the constraint and main task
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
fprintf(1,'Defining robot model ...\n');
DH = [0.0, 0.31, 0.0, pi/2; % Robot Kinematic model specified by the Denavit-Hartnbergh
      0.0, 0.0, 0.0, -pi/2;
      0.0, 0.4, 0.0, -pi/2;
      0.0, 0.0, 0.0, pi/2;
      0.0, 0.39, 0.0, pi/2;
      0.0, 0.0, 0.0, -pi/2;
      0.0, 0.21-0.132, 0.0, 0.0];
robot = SerialLink(DH); % Peters Cork robotics library has to be installed
Phi_A = def_phia_4_spm_new(robot); % Phi_A(q): vector of regressors for the Constraint matrix as a function of the configuration
%Phi_b = def_phib_4_spm_exp(robot);
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------

%% Parallel computig settingsfeval(
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
fprintf(1,'Initializing parallel pool ...\n');
gcp(); % Get the current parallel pool
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------

%% Computing H matrix
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
fprintf(1,'Computing H ...\n');
file_name = 'H_cell_A.mat';
%H_fun = @(x,u) [Phi_A(x)*u; -Phi_b(x)];
H_fun = @(x,u) Phi_A(x);
% if exist(file_name,'file')
%     load(file_name);
% else
    H_cell = cell(1, NDem);
    H = cell(1, NDem);
    parfor idx=1:NDem
        % H(q,u): Matrix of regressors as a function of the configuration and action compute number of regressors
        H_cell{idx} = cellfun(H_fun, x{idx}, u{idx},'UniformOutput',false);
        H{idx} = cell2mat(H_cell{idx});
    end
    save(file_name,'H','H_cell');
% end
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------

%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
%% Estimating weights with the all data sets together and saving to file
fprintf(1, 'Estimating W ...\n');
tic;
ConstraintDim = 3;
W_hat = cell(1,NDem);
W_hat_vec = cell(1,NDem);
parfor idx=1:NDem
    [Ui,~,~]=svd(H{idx});
    W_hat{idx} = Ui(:,(end-(ConstraintDim-1)):end).';
    W_hat_vec{idx} = reshape(W_hat{idx},[],1);
end
save('W_true_A','W_hat','W_hat_vec');
toc
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------


%% Remove path
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------
rmpath(genpath('../'));
%--------------------------------------------------------------------------
%--------------------------------------------------------------------------